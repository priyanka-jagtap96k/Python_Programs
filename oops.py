# -*- coding: utf-8 -*-
"""OOPs

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IF0gjG3NsAxfGgHjYlKrlKfqW0ttB_9Q

OOPS - object oriented programing
1. class
2. object
3. inheritance
4. polymorphism
5. abstraction
6. encapsulation
"""

class Mobile:
  def VolumeUp(self):
    print("Volume Up")
  def VolumeDown(self):
    print("Volume down")

m = Mobile()
m.VolumeUp()
m.VolumeDown()

class Car:
  def Start(self):
    print("Car Starting")
  def Break(self):
    print("Break")
  def Cultch(self):
    print("Cultch")
  def Exelletor(self):
    print("Exelletor")
  def Stop(self):
    print("Stop")

c = Car()
c.Start()
c.Break()
c.Cultch()
c.Exelletor()
c.Stop()

class Student():
  def Disply(self,name,rollno):
    print("Name : {name} , RollNo : {rollno}")
  def Result(self,s1,s2,s3):
    total = s1+s2+s3
    per = total/3.0
    if per >= 90 :
      print("Grade A")
    elif per >= 80:
      print("Grade B")
    elif per >= 70:
      print("Grade C")
    else:
      print("Fail")
s = Student()
s.Disply('Piuu',1)
s.Result(90,90,90)

class Fan:
  def Up(self):   #def - Defination ,Self - Reference of class of current object
    print("Speed Up")
  def Down(self):
    print("Speed Down")

f = Fan()
f.Up()
f.Down()

Name = input("Enter Name ")
Rollno = int(input("Enter Roll No "))
s1 = int(input("Enter Sub 1 Marks "))
s2 = int(input("Enter Sub 2 Marks "))
s3 = int(input("Enter Sub 3 Marks "))
class students:
  def details(self):
    print(f"Hi {Name} your RollNo is {Rollno}")
  def result(self):
    total = s1+s2+s3
    per = total/3.0
    if per >= 90 :
      print("Gread A")
    elif per >= 80 :
      print("Gread B")
    elif per >= 70 :
      print("Gread c")
    else:
      print("Fail")

s = students()
"""s.details(1,'piuu')
s.result(90,90,90)"""
s.details()
s.result()

name = input("Enter Employee Name ")
deptno = int(input("Enter Employee Deptno "))
bs = int(input("Enter Basic Salary "))
class employee:
  def Disply(self):
    print(f"Employee name is {name} and deptno is {deptno}")
  def TotalSal(self):
    if bs == 25000:
      da = bs * 0.1
      hra = bs *0.2
      total = bs + da + hra
      print(f"Total Salary Of {name} is {total}")
    elif bs == 50000:
      da = bs * 0.2
      hra = bs *0.3
      total = bs + da + hra
      print(f"Total Salary Of {name} is{total}")
    else :
      print("Employee NOT FOUND")

e = employee()
e.Disply()
e.TotalSal()

# Constructor
#interpreter - bytecode - pvm(python virtual machine) - JIT(just in time) - machine code - cpu- then output

class A :
  def __init__(self):  #constructor without argument
    print("Contrusctor Explicitly")

a = A()

class Emp :
  def __init__(self,name,age):  #constructor with argument
    self.name = name
    self.age = age
  def Details(self):
    print(self.name,self.age)

e = Emp('priya',22)
e.Details()

